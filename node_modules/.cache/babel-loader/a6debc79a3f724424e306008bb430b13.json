{"ast":null,"code":"import _objectSpread from\"/Users/scholz/fiap-react/dnd-example/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/Users/scholz/fiap-react/dnd-example/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/scholz/fiap-react/dnd-example/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/scholz/fiap-react/dnd-example/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/scholz/fiap-react/dnd-example/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/scholz/fiap-react/dnd-example/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import'./Board.css';import List from'./List';var Board=/*#__PURE__*/function(_Component){_inherits(Board,_Component);function Board(props){var _this;_classCallCheck(this,Board);_this=_possibleConstructorReturn(this,_getPrototypeOf(Board).call(this,props));//if there's a localStorage to be had grab it otherwise set state\n_this.onDragStart=function(e,fromList){console.log(\"what a drag!\");var dragInfo={taskId:e.currentTarget.id,fromList:fromList};localStorage.setItem('dragInfo',JSON.stringify(dragInfo));};_this.onDragOver=function(e){e.preventDefault();};_this.onDrop=function(e,listNum){//get the dropped task card, the localStorage, \nvar droppedTask=localStorage.getItem('dragInfo');var rawLS=localStorage.getItem('lists');var parsedLS=JSON.parse(rawLS);var parsedDragInfo=JSON.parse(droppedTask);//get task cards array, get rid of moved card, and put a new card\n// in the list where it was dropped\nvar cardsArray=parsedLS[parsedDragInfo.fromList].cards;var taskCard=cardsArray.find(function(card){return card.timeId==parsedDragInfo.taskId;});var indexOfCard=cardsArray.findIndex(function(card){return card.timeId==parsedDragInfo.taskId;});parsedLS[parsedDragInfo.fromList].cards.splice(indexOfCard,1);parsedLS[listNum].cards.push(_objectSpread({},taskCard,{listNumber:parseInt(listNum)}));//sync the state and localStorage\n_this.setState({lists:parsedLS});localStorage.setItem('lists',JSON.stringify(parsedLS));};if(localStorage.getItem('lists')){var rawLS=localStorage.getItem('lists');var parsedLS=JSON.parse(rawLS);_this.state={lists:parsedLS};}else{_this.state={lists:[{title:'To Do',id:0,cards:[{taskText:'default task card 1',listNumber:0,timeId:0},{taskText:'default task card 2',listNumber:0,timeId:1}]},{title:'Doing',id:1,cards:[{taskText:'default task card 1',listNumber:1,timeId:2},{taskText:'default task card 2',listNumber:1,timeId:3}]},{title:'Test',id:2,cards:[{taskText:'default task card 1',listNumber:2,timeId:4},{taskText:'default task card 2',listNumber:2,timeId:5}]},{title:'Done',id:3,cards:[{taskText:'default task card 1',listNumber:3,timeId:6},{taskText:'default task card 2',listNumber:3,timeId:7}]}]};localStorage.setItem('lists',JSON.stringify(_this.state.lists));}return _this;}//get id of item being dragged and list where it's coming from\n_createClass(Board,[{key:\"addTaskCard\",//add some new task cards\nvalue:function addTaskCard(taskText,listNumber){var rawLS=localStorage.getItem('lists');var parsedLS=JSON.parse(rawLS);var newTask={taskText:taskText,listNumber:listNumber,timeId:new Date().valueOf()};parsedLS[listNumber].cards.push(newTask);//sync state and localStorage\nthis.setState({lists:parsedLS});localStorage.setItem('lists',JSON.stringify(parsedLS));}},{key:\"render\",value:function render(){var _this2=this;var lists=this.state.lists.map(function(list,index){return React.createElement(\"li\",{className:\"list-wrapper\",key:index},React.createElement(List,Object.assign({},list,{onAdd:function onAdd(taskText,listNumber){return _this2.addTaskCard(taskText,listNumber);},onDragStart:function onDragStart(e,fromList){return _this2.onDragStart(e,\"\".concat(list.id));},onDragOver:function onDragOver(e){return _this2.onDragOver(e);},onDrop:function onDrop(e,listNum){_this2.onDrop(e,\"\".concat(list.id));}})));});return React.createElement(\"div\",{className:\"board\"},React.createElement(\"ul\",{className:\"lists\"},lists));}}]);return Board;}(Component);export{Board as default};","map":{"version":3,"sources":["/Users/scholz/fiap-react/dnd-example/src/Board.js"],"names":["React","Component","List","Board","props","onDragStart","e","fromList","console","log","dragInfo","taskId","currentTarget","id","localStorage","setItem","JSON","stringify","onDragOver","preventDefault","onDrop","listNum","droppedTask","getItem","rawLS","parsedLS","parse","parsedDragInfo","cardsArray","cards","taskCard","find","card","timeId","indexOfCard","findIndex","splice","push","listNumber","parseInt","setState","lists","state","title","taskText","newTask","Date","valueOf","map","list","index","addTaskCard"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Board.css';\nimport List from './List';\n\nexport default class Board extends Component {\n  constructor(props) {\n    super(props);\n    //if there's a localStorage to be had grab it otherwise set state\n    if(localStorage.getItem('lists')) {\n      const rawLS = localStorage.getItem('lists');\n      const parsedLS = JSON.parse(rawLS);\n      this.state = { lists: parsedLS }\n    } else {\n      this.state = {\n        lists: [\n          {\n            title: 'To Do',\n            id: 0,\n            cards: [{\n              taskText: 'default task card 1',\n              listNumber: 0,\n              timeId: 0\n            }, \n            {\n              taskText: 'default task card 2',\n              listNumber: 0,\n              timeId: 1\n            }]\n          },\n          {\n            title: 'Doing',\n            id: 1,\n            cards: [{\n              taskText: 'default task card 1',\n              listNumber: 1,\n              timeId: 2\n            }, \n            {\n              taskText: 'default task card 2',\n              listNumber: 1,\n              timeId: 3\n            }]\n          },\n          {\n            title: 'Test',\n            id: 2,\n            cards: [{\n              taskText: 'default task card 1',\n              listNumber: 2,\n              timeId: 4\n            }, \n            {\n              taskText: 'default task card 2',\n              listNumber: 2,\n              timeId: 5\n            }]\n          },\n          {\n            title: 'Done',\n            id: 3,\n            cards: [{\n              taskText: 'default task card 1',\n              listNumber: 3,\n              timeId: 6\n            }, \n            {\n              taskText: 'default task card 2',\n              listNumber: 3,\n              timeId: 7\n            }]\n          }\n        ]\n      }\n\n      localStorage.setItem('lists', JSON.stringify(this.state.lists))\n    }\n  }\n\n  //get id of item being dragged and list where it's coming from\n  onDragStart = (e, fromList) => {\n    console.log(`what a drag!`)\n    const dragInfo = {\n      taskId: e.currentTarget.id,\n      fromList: fromList\n    }\n  \n    localStorage.setItem('dragInfo', JSON.stringify(dragInfo));\n  }\n\n  onDragOver = (e) => {\n    e.preventDefault();\n  }\n\n  onDrop = (e, listNum) => {\n    //get the dropped task card, the localStorage, \n    const droppedTask = localStorage.getItem('dragInfo');\n    const rawLS = localStorage.getItem('lists');\n    const parsedLS = JSON.parse(rawLS);\n    const parsedDragInfo = JSON.parse(droppedTask)\n    \n    //get task cards array, get rid of moved card, and put a new card\n    // in the list where it was dropped\n    const cardsArray = parsedLS[parsedDragInfo.fromList].cards\n    const taskCard = cardsArray.find(card => card.timeId == parsedDragInfo.taskId)\n    const indexOfCard = cardsArray.findIndex(card => card.timeId == parsedDragInfo.taskId)\n    parsedLS[parsedDragInfo.fromList].cards.splice(indexOfCard, 1)\n    parsedLS[listNum].cards.push({...taskCard, listNumber: parseInt(listNum)})\n   \n    //sync the state and localStorage\n    this.setState({\n      lists: parsedLS\n    });\n    localStorage.setItem('lists', JSON.stringify(parsedLS));\n    \n  }\n\n  //add some new task cards\n  addTaskCard(taskText, listNumber) {\n    const rawLS = localStorage.getItem('lists');\n    const parsedLS = JSON.parse(rawLS);\n\n    const newTask = {\n      taskText,\n      listNumber,\n      timeId: new Date().valueOf()\n    }\n\n    parsedLS[listNumber].cards.push(newTask)\n\n    //sync state and localStorage\n    this.setState({\n      lists: parsedLS\n    })\n    localStorage.setItem('lists', JSON.stringify(parsedLS))\n  \n  }\n\n\nrender() {\n  const lists = this.state.lists.map((list, index) => (\n    <li className=\"list-wrapper\" key={index}>\n      <List {...list} \n        onAdd={(taskText, listNumber) => this.addTaskCard(taskText, listNumber)} \n        onDragStart={(e, fromList) => this.onDragStart(e, `${list.id}`)}\n        onDragOver={(e) => this.onDragOver(e)} \n        onDrop={(e, listNum) => {this.onDrop(e, `${list.id}`)}}\n      />\n    </li>\n  ));\n   \n  return (\n    <div className=\"board\">\n      <ul className=\"lists\">\n        {lists}\n      </ul>\n    </div>\n  );\n  }\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"/Users/scholz/fiap-react/dnd-example/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/scholz/fiap-react/dnd-example/src/Board.js\";\nimport React, { Component } from 'react';\nimport './Board.css';\nimport List from './List';\nexport default class Board extends Component {\n  constructor(props) {\n    super(props); //if there's a localStorage to be had grab it otherwise set state\n\n    this.onDragStart = (e, fromList) => {\n      console.log(`what a drag!`);\n      const dragInfo = {\n        taskId: e.currentTarget.id,\n        fromList: fromList\n      };\n      localStorage.setItem('dragInfo', JSON.stringify(dragInfo));\n    };\n\n    this.onDragOver = e => {\n      e.preventDefault();\n    };\n\n    this.onDrop = (e, listNum) => {\n      //get the dropped task card, the localStorage, \n      const droppedTask = localStorage.getItem('dragInfo');\n      const rawLS = localStorage.getItem('lists');\n      const parsedLS = JSON.parse(rawLS);\n      const parsedDragInfo = JSON.parse(droppedTask); //get task cards array, get rid of moved card, and put a new card\n      // in the list where it was dropped\n\n      const cardsArray = parsedLS[parsedDragInfo.fromList].cards;\n      const taskCard = cardsArray.find(card => card.timeId == parsedDragInfo.taskId);\n      const indexOfCard = cardsArray.findIndex(card => card.timeId == parsedDragInfo.taskId);\n      parsedLS[parsedDragInfo.fromList].cards.splice(indexOfCard, 1);\n      parsedLS[listNum].cards.push(_objectSpread({}, taskCard, {\n        listNumber: parseInt(listNum)\n      })); //sync the state and localStorage\n\n      this.setState({\n        lists: parsedLS\n      });\n      localStorage.setItem('lists', JSON.stringify(parsedLS));\n    };\n\n    if (localStorage.getItem('lists')) {\n      const rawLS = localStorage.getItem('lists');\n      const parsedLS = JSON.parse(rawLS);\n      this.state = {\n        lists: parsedLS\n      };\n    } else {\n      this.state = {\n        lists: [{\n          title: 'To Do',\n          id: 0,\n          cards: [{\n            taskText: 'default task card 1',\n            listNumber: 0,\n            timeId: 0\n          }, {\n            taskText: 'default task card 2',\n            listNumber: 0,\n            timeId: 1\n          }]\n        }, {\n          title: 'Doing',\n          id: 1,\n          cards: [{\n            taskText: 'default task card 1',\n            listNumber: 1,\n            timeId: 2\n          }, {\n            taskText: 'default task card 2',\n            listNumber: 1,\n            timeId: 3\n          }]\n        }, {\n          title: 'Test',\n          id: 2,\n          cards: [{\n            taskText: 'default task card 1',\n            listNumber: 2,\n            timeId: 4\n          }, {\n            taskText: 'default task card 2',\n            listNumber: 2,\n            timeId: 5\n          }]\n        }, {\n          title: 'Done',\n          id: 3,\n          cards: [{\n            taskText: 'default task card 1',\n            listNumber: 3,\n            timeId: 6\n          }, {\n            taskText: 'default task card 2',\n            listNumber: 3,\n            timeId: 7\n          }]\n        }]\n      };\n      localStorage.setItem('lists', JSON.stringify(this.state.lists));\n    }\n  } //get id of item being dragged and list where it's coming from\n\n\n  //add some new task cards\n  addTaskCard(taskText, listNumber) {\n    const rawLS = localStorage.getItem('lists');\n    const parsedLS = JSON.parse(rawLS);\n    const newTask = {\n      taskText,\n      listNumber,\n      timeId: new Date().valueOf()\n    };\n    parsedLS[listNumber].cards.push(newTask); //sync state and localStorage\n\n    this.setState({\n      lists: parsedLS\n    });\n    localStorage.setItem('lists', JSON.stringify(parsedLS));\n  }\n\n  render() {\n    const lists = this.state.lists.map((list, index) => React.createElement(\"li\", {\n      className: \"list-wrapper\",\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(List, Object.assign({}, list, {\n      onAdd: (taskText, listNumber) => this.addTaskCard(taskText, listNumber),\n      onDragStart: (e, fromList) => this.onDragStart(e, `${list.id}`),\n      onDragOver: e => this.onDragOver(e),\n      onDrop: (e, listNum) => {\n        this.onDrop(e, `${list.id}`);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }))));\n    return React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"lists\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, lists));\n  }\n\n}","map":{"version":3,"sources":["/Users/scholz/fiap-react/dnd-example/src/Board.js"],"names":["React","Component","List","Board","constructor","props","onDragStart","e","fromList","console","log","dragInfo","taskId","currentTarget","id","localStorage","setItem","JSON","stringify","onDragOver","preventDefault","onDrop","listNum","droppedTask","getItem","rawLS","parsedLS","parse","parsedDragInfo","cardsArray","cards","taskCard","find","card","timeId","indexOfCard","findIndex","splice","push","listNumber","parseInt","setState","lists","state","title","taskText","addTaskCard","newTask","Date","valueOf","render","map","list","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Board.css';\nimport List from './List';\n\nexport default class Board extends Component {\n  constructor(props) {\n    super(props);\n    //if there's a localStorage to be had grab it otherwise set state\n    if(localStorage.getItem('lists')) {\n      const rawLS = localStorage.getItem('lists');\n      const parsedLS = JSON.parse(rawLS);\n      this.state = { lists: parsedLS }\n    } else {\n      this.state = {\n        lists: [\n          {\n            title: 'To Do',\n            id: 0,\n            cards: [{\n              taskText: 'default task card 1',\n              listNumber: 0,\n              timeId: 0\n            }, \n            {\n              taskText: 'default task card 2',\n              listNumber: 0,\n              timeId: 1\n            }]\n          },\n          {\n            title: 'Doing',\n            id: 1,\n            cards: [{\n              taskText: 'default task card 1',\n              listNumber: 1,\n              timeId: 2\n            }, \n            {\n              taskText: 'default task card 2',\n              listNumber: 1,\n              timeId: 3\n            }]\n          },\n          {\n            title: 'Test',\n            id: 2,\n            cards: [{\n              taskText: 'default task card 1',\n              listNumber: 2,\n              timeId: 4\n            }, \n            {\n              taskText: 'default task card 2',\n              listNumber: 2,\n              timeId: 5\n            }]\n          },\n          {\n            title: 'Done',\n            id: 3,\n            cards: [{\n              taskText: 'default task card 1',\n              listNumber: 3,\n              timeId: 6\n            }, \n            {\n              taskText: 'default task card 2',\n              listNumber: 3,\n              timeId: 7\n            }]\n          }\n        ]\n      }\n\n      localStorage.setItem('lists', JSON.stringify(this.state.lists))\n    }\n  }\n\n  //get id of item being dragged and list where it's coming from\n  onDragStart = (e, fromList) => {\n    console.log(`what a drag!`)\n    const dragInfo = {\n      taskId: e.currentTarget.id,\n      fromList: fromList\n    }\n  \n    localStorage.setItem('dragInfo', JSON.stringify(dragInfo));\n  }\n\n  onDragOver = (e) => {\n    e.preventDefault();\n  }\n\n  onDrop = (e, listNum) => {\n    //get the dropped task card, the localStorage, \n    const droppedTask = localStorage.getItem('dragInfo');\n    const rawLS = localStorage.getItem('lists');\n    const parsedLS = JSON.parse(rawLS);\n    const parsedDragInfo = JSON.parse(droppedTask)\n    \n    //get task cards array, get rid of moved card, and put a new card\n    // in the list where it was dropped\n    const cardsArray = parsedLS[parsedDragInfo.fromList].cards\n    const taskCard = cardsArray.find(card => card.timeId == parsedDragInfo.taskId)\n    const indexOfCard = cardsArray.findIndex(card => card.timeId == parsedDragInfo.taskId)\n    parsedLS[parsedDragInfo.fromList].cards.splice(indexOfCard, 1)\n    parsedLS[listNum].cards.push({...taskCard, listNumber: parseInt(listNum)})\n   \n    //sync the state and localStorage\n    this.setState({\n      lists: parsedLS\n    });\n    localStorage.setItem('lists', JSON.stringify(parsedLS));\n    \n  }\n\n  //add some new task cards\n  addTaskCard(taskText, listNumber) {\n    const rawLS = localStorage.getItem('lists');\n    const parsedLS = JSON.parse(rawLS);\n\n    const newTask = {\n      taskText,\n      listNumber,\n      timeId: new Date().valueOf()\n    }\n\n    parsedLS[listNumber].cards.push(newTask)\n\n    //sync state and localStorage\n    this.setState({\n      lists: parsedLS\n    })\n    localStorage.setItem('lists', JSON.stringify(parsedLS))\n  \n  }\n\n\nrender() {\n  const lists = this.state.lists.map((list, index) => (\n    <li className=\"list-wrapper\" key={index}>\n      <List {...list} \n        onAdd={(taskText, listNumber) => this.addTaskCard(taskText, listNumber)} \n        onDragStart={(e, fromList) => this.onDragStart(e, `${list.id}`)}\n        onDragOver={(e) => this.onDragOver(e)} \n        onDrop={(e, listNum) => {this.onDrop(e, `${list.id}`)}}\n      />\n    </li>\n  ));\n   \n  return (\n    <div className=\"board\">\n      <ul className=\"lists\">\n        {lists}\n      </ul>\n    </div>\n  );\n  }\n}"]},"metadata":{},"sourceType":"module"}
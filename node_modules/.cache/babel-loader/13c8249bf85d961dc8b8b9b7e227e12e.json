{"ast":null,"code":"import _objectSpread from \"/Users/scholz/fiap-react/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/scholz/fiap-react/src/components/Board.js\";\nimport React, { Component } from 'react';\nimport './../css/Board.css';\nimport List from './List';\nexport default class Board extends Component {\n  constructor(props) {\n    super(props); //if there's a localStorage to be had grab it otherwise set state\n\n    this.onDragStart = (e, fromList) => {\n      const dragInfo = {\n        taskId: e.currentTarget.id,\n        fromList: fromList\n      };\n      localStorage.setItem('dragInfo', JSON.stringify(dragInfo));\n    };\n\n    this.onTaskEdit = (taskText, listNumber, id) => {\n      console.log(`click edit`);\n      const taskEdit = {\n        taskId: id,\n        fromList: listNumber,\n        text: taskText\n      };\n      const rawLS = localStorage.getItem('lists');\n      const parsedLS = JSON.parse(rawLS);\n      const cardsArray = parsedLS[taskEdit.fromList].cards;\n      const indexOfCard = cardsArray.findIndex(card => card.timeId == taskEdit.taskId);\n      parsedLS[taskEdit.fromList].cards[indexOfCard].taskText = taskEdit.text; //sync the state and localStorage\n\n      this.setState({\n        lists: parsedLS\n      });\n      localStorage.setItem('lists', JSON.stringify(parsedLS));\n    };\n\n    this.onCardRemove = (listNumber, id) => {\n      console.log(`click remove`);\n      const cardRemove = {\n        taskId: id,\n        fromList: listNumber\n      };\n      const rawLS = localStorage.getItem('lists');\n      const parsedLS = JSON.parse(rawLS);\n      const cardsArray = parsedLS[cardRemove.fromList].cards;\n      const indexOfCard = cardsArray.findIndex(card => card.timeId == cardRemove.taskId);\n      parsedLS[cardRemove.fromList].cards.splice(indexOfCard, 1); //sync the state and localStorage\n\n      this.setState({\n        lists: parsedLS\n      });\n      localStorage.setItem('lists', JSON.stringify(parsedLS));\n    };\n\n    this.onDragOver = e => {\n      e.preventDefault();\n    };\n\n    this.onDrop = (e, listNum) => {\n      //get the dropped task card, the localStorage, \n      const droppedTask = localStorage.getItem('dragInfo');\n      const rawLS = localStorage.getItem('lists');\n      const parsedLS = JSON.parse(rawLS);\n      const parsedDragInfo = JSON.parse(droppedTask); //get task cards array, get rid of moved card, and put a new card\n      // in the list where it was dropped\n\n      const cardsArray = parsedLS[parsedDragInfo.fromList].cards;\n      const taskCard = cardsArray.find(card => card.timeId === parsedDragInfo.taskId);\n      const indexOfCard = cardsArray.findIndex(card => card.timeId === parsedDragInfo.taskId);\n      parsedLS[parsedDragInfo.fromList].cards.splice(indexOfCard, 1);\n      parsedLS[listNum].cards.push(_objectSpread({}, taskCard, {\n        listNumber: parseInt(listNum)\n      })); //sync the state and localStorage\n\n      this.setState({\n        lists: parsedLS\n      });\n      localStorage.setItem('lists', JSON.stringify(parsedLS));\n    };\n\n    if (localStorage.getItem('lists')) {\n      const rawLS = localStorage.getItem('lists');\n      const parsedLS = JSON.parse(rawLS);\n      this.state = {\n        lists: parsedLS\n      };\n    } else {\n      this.state = {\n        lists: [{\n          title: 'To Do',\n          id: 0,\n          cards: [{\n            taskText: 'MBA FIAP',\n            listNumber: 0,\n            timeId: 0\n          }, {\n            taskText: 'RM 334466',\n            listNumber: 0,\n            timeId: 1\n          }]\n        }, {\n          title: 'Doing',\n          id: 1,\n          cards: [{\n            taskText: 'work',\n            listNumber: 1,\n            timeId: 2\n          }, {\n            taskText: 'Blockchain',\n            listNumber: 1,\n            timeId: 3\n          }]\n        }, {\n          title: 'Test',\n          id: 2,\n          cards: [{\n            taskText: 'life',\n            listNumber: 2,\n            timeId: 4\n          }, {\n            taskText: 'task',\n            listNumber: 2,\n            timeId: 5\n          }]\n        }, {\n          title: 'Done',\n          id: 3,\n          cards: [{\n            taskText: 'task1',\n            listNumber: 3,\n            timeId: 6\n          }, {\n            taskText: 'default task card 2',\n            listNumber: 3,\n            timeId: 7\n          }]\n        }]\n      };\n      localStorage.setItem('lists', JSON.stringify(this.state.lists));\n    }\n  } //get id of item being dragged and list where it's coming from\n\n\n  //add some new task cards\n  addTaskCard(taskText, listNumber) {\n    const rawLS = localStorage.getItem('lists');\n    const parsedLS = JSON.parse(rawLS);\n    const newTask = {\n      taskText,\n      listNumber,\n      timeId: new Date().valueOf()\n    };\n    parsedLS[listNumber].cards.push(newTask); //sync state and localStorage\n\n    this.setState({\n      lists: parsedLS\n    });\n    localStorage.setItem('lists', JSON.stringify(parsedLS));\n  }\n\n  render() {\n    const lists = this.state.lists.map((list, index) => React.createElement(\"li\", {\n      className: \"list-wrapper\",\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(List, Object.assign({}, list, {\n      onAdd: (taskText, listNumber) => this.addTaskCard(taskText, listNumber),\n      onDragStart: (e, fromList) => this.onDragStart(e, `${list.id}`),\n      onDragOver: e => this.onDragOver(e),\n      onDrop: (e, listNum) => {\n        this.onDrop(e, `${list.id}`);\n      },\n      onUpdate: (taskText, listNumber, id) => this.onTaskEdit(taskText, `${list.id}`, id),\n      onCardRemove: (listNumber, id) => this.onCardRemove(`${list.id}`, id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }))));\n    return React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"lists\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, lists));\n  }\n\n}","map":{"version":3,"sources":["/Users/scholz/fiap-react/src/components/Board.js"],"names":["React","Component","List","Board","constructor","props","onDragStart","e","fromList","dragInfo","taskId","currentTarget","id","localStorage","setItem","JSON","stringify","onTaskEdit","taskText","listNumber","console","log","taskEdit","text","rawLS","getItem","parsedLS","parse","cardsArray","cards","indexOfCard","findIndex","card","timeId","setState","lists","onCardRemove","cardRemove","splice","onDragOver","preventDefault","onDrop","listNum","droppedTask","parsedDragInfo","taskCard","find","push","parseInt","state","title","addTaskCard","newTask","Date","valueOf","render","map","list","index"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,oBAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,eAAe,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAC3CG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAEjB;;AAFiB,SA0EnBC,WA1EmB,GA0EL,CAACC,CAAD,EAAIC,QAAJ,KAAiB;AAC7B,YAAMC,QAAQ,GAAG;AACfC,QAAAA,MAAM,EAAEH,CAAC,CAACI,aAAF,CAAgBC,EADT;AAEfJ,QAAAA,QAAQ,EAAEA;AAFK,OAAjB;AAKAK,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeP,QAAf,CAAjC;AACD,KAjFkB;;AAAA,SAmFnBQ,UAnFmB,GAmFN,CAACC,QAAD,EAAWC,UAAX,EAAuBP,EAAvB,KAA8B;AAEzCQ,MAAAA,OAAO,CAACC,GAAR,CAAa,YAAb;AACA,YAAMC,QAAQ,GAAG;AACfZ,QAAAA,MAAM,EAAEE,EADO;AAEfJ,QAAAA,QAAQ,EAAEW,UAFK;AAGfI,QAAAA,IAAI,EAAEL;AAHS,OAAjB;AAKA,YAAMM,KAAK,GAAGX,YAAY,CAACY,OAAb,CAAqB,OAArB,CAAd;AACA,YAAMC,QAAQ,GAAGX,IAAI,CAACY,KAAL,CAAWH,KAAX,CAAjB;AACA,YAAMI,UAAU,GAAGF,QAAQ,CAACJ,QAAQ,CAACd,QAAV,CAAR,CAA4BqB,KAA/C;AACA,YAAMC,WAAW,GAAGF,UAAU,CAACG,SAAX,CAAqBC,IAAI,IAAIA,IAAI,CAACC,MAAL,IAAeX,QAAQ,CAACZ,MAArD,CAApB;AACAgB,MAAAA,QAAQ,CAACJ,QAAQ,CAACd,QAAV,CAAR,CAA4BqB,KAA5B,CAAkCC,WAAlC,EAA+CZ,QAA/C,GAA0DI,QAAQ,CAACC,IAAnE,CAZyC,CAczC;;AACA,WAAKW,QAAL,CAAc;AACZC,QAAAA,KAAK,EAAET;AADK,OAAd;AAGAb,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeU,QAAf,CAA9B;AAED,KAvGkB;;AAAA,SAyGnBU,YAzGmB,GAyGJ,CAACjB,UAAD,EAAaP,EAAb,KAAoB;AAEjCQ,MAAAA,OAAO,CAACC,GAAR,CAAa,cAAb;AACA,YAAMgB,UAAU,GAAG;AACjB3B,QAAAA,MAAM,EAAEE,EADS;AAEjBJ,QAAAA,QAAQ,EAAEW;AAFO,OAAnB;AAKA,YAAMK,KAAK,GAAGX,YAAY,CAACY,OAAb,CAAqB,OAArB,CAAd;AACA,YAAMC,QAAQ,GAAGX,IAAI,CAACY,KAAL,CAAWH,KAAX,CAAjB;AACA,YAAMI,UAAU,GAAGF,QAAQ,CAACW,UAAU,CAAC7B,QAAZ,CAAR,CAA8BqB,KAAjD;AACA,YAAMC,WAAW,GAAGF,UAAU,CAACG,SAAX,CAAqBC,IAAI,IAAIA,IAAI,CAACC,MAAL,IAAeI,UAAU,CAAC3B,MAAvD,CAApB;AACAgB,MAAAA,QAAQ,CAACW,UAAU,CAAC7B,QAAZ,CAAR,CAA8BqB,KAA9B,CAAoCS,MAApC,CAA2CR,WAA3C,EAAwD,CAAxD,EAZiC,CAcjC;;AACA,WAAKI,QAAL,CAAc;AACZC,QAAAA,KAAK,EAAET;AADK,OAAd;AAGAb,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeU,QAAf,CAA9B;AAED,KA7HkB;;AAAA,SA+HnBa,UA/HmB,GA+HLhC,CAAD,IAAO;AAClBA,MAAAA,CAAC,CAACiC,cAAF;AACD,KAjIkB;;AAAA,SAmInBC,MAnImB,GAmIV,CAAClC,CAAD,EAAImC,OAAJ,KAAgB;AACvB;AACA,YAAMC,WAAW,GAAG9B,YAAY,CAACY,OAAb,CAAqB,UAArB,CAApB;AACA,YAAMD,KAAK,GAAGX,YAAY,CAACY,OAAb,CAAqB,OAArB,CAAd;AACA,YAAMC,QAAQ,GAAGX,IAAI,CAACY,KAAL,CAAWH,KAAX,CAAjB;AACA,YAAMoB,cAAc,GAAG7B,IAAI,CAACY,KAAL,CAAWgB,WAAX,CAAvB,CALuB,CAOvB;AACA;;AACA,YAAMf,UAAU,GAAGF,QAAQ,CAACkB,cAAc,CAACpC,QAAhB,CAAR,CAAkCqB,KAArD;AACA,YAAMgB,QAAQ,GAAGjB,UAAU,CAACkB,IAAX,CAAgBd,IAAI,IAAIA,IAAI,CAACC,MAAL,KAAgBW,cAAc,CAAClC,MAAvD,CAAjB;AACA,YAAMoB,WAAW,GAAGF,UAAU,CAACG,SAAX,CAAqBC,IAAI,IAAIA,IAAI,CAACC,MAAL,KAAgBW,cAAc,CAAClC,MAA5D,CAApB;AACAgB,MAAAA,QAAQ,CAACkB,cAAc,CAACpC,QAAhB,CAAR,CAAkCqB,KAAlC,CAAwCS,MAAxC,CAA+CR,WAA/C,EAA4D,CAA5D;AACAJ,MAAAA,QAAQ,CAACgB,OAAD,CAAR,CAAkBb,KAAlB,CAAwBkB,IAAxB,mBAAiCF,QAAjC;AAA2C1B,QAAAA,UAAU,EAAE6B,QAAQ,CAACN,OAAD;AAA/D,UAbuB,CAevB;;AACA,WAAKR,QAAL,CAAc;AACZC,QAAAA,KAAK,EAAET;AADK,OAAd;AAGAb,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeU,QAAf,CAA9B;AAED,KAxJkB;;AAGjB,QAAGb,YAAY,CAACY,OAAb,CAAqB,OAArB,CAAH,EAAkC;AAChC,YAAMD,KAAK,GAAGX,YAAY,CAACY,OAAb,CAAqB,OAArB,CAAd;AACA,YAAMC,QAAQ,GAAGX,IAAI,CAACY,KAAL,CAAWH,KAAX,CAAjB;AACA,WAAKyB,KAAL,GAAa;AAAEd,QAAAA,KAAK,EAAET;AAAT,OAAb;AACD,KAJD,MAIO;AACL,WAAKuB,KAAL,GAAa;AACXd,QAAAA,KAAK,EAAE,CACL;AACEe,UAAAA,KAAK,EAAE,OADT;AAEEtC,UAAAA,EAAE,EAAE,CAFN;AAGEiB,UAAAA,KAAK,EAAE,CAAC;AACNX,YAAAA,QAAQ,EAAE,UADJ;AAENC,YAAAA,UAAU,EAAE,CAFN;AAGNc,YAAAA,MAAM,EAAE;AAHF,WAAD,EAKP;AACEf,YAAAA,QAAQ,EAAE,WADZ;AAEEC,YAAAA,UAAU,EAAE,CAFd;AAGEc,YAAAA,MAAM,EAAE;AAHV,WALO;AAHT,SADK,EAeL;AACEiB,UAAAA,KAAK,EAAE,OADT;AAEEtC,UAAAA,EAAE,EAAE,CAFN;AAGEiB,UAAAA,KAAK,EAAE,CAAC;AACNX,YAAAA,QAAQ,EAAE,MADJ;AAENC,YAAAA,UAAU,EAAE,CAFN;AAGNc,YAAAA,MAAM,EAAE;AAHF,WAAD,EAKP;AACEf,YAAAA,QAAQ,EAAE,YADZ;AAEEC,YAAAA,UAAU,EAAE,CAFd;AAGEc,YAAAA,MAAM,EAAE;AAHV,WALO;AAHT,SAfK,EA6BL;AACEiB,UAAAA,KAAK,EAAE,MADT;AAEEtC,UAAAA,EAAE,EAAE,CAFN;AAGEiB,UAAAA,KAAK,EAAE,CAAC;AACNX,YAAAA,QAAQ,EAAE,MADJ;AAENC,YAAAA,UAAU,EAAE,CAFN;AAGNc,YAAAA,MAAM,EAAE;AAHF,WAAD,EAKP;AACEf,YAAAA,QAAQ,EAAE,MADZ;AAEEC,YAAAA,UAAU,EAAE,CAFd;AAGEc,YAAAA,MAAM,EAAE;AAHV,WALO;AAHT,SA7BK,EA2CL;AACEiB,UAAAA,KAAK,EAAE,MADT;AAEEtC,UAAAA,EAAE,EAAE,CAFN;AAGEiB,UAAAA,KAAK,EAAE,CAAC;AACNX,YAAAA,QAAQ,EAAE,OADJ;AAENC,YAAAA,UAAU,EAAE,CAFN;AAGNc,YAAAA,MAAM,EAAE;AAHF,WAAD,EAKP;AACEf,YAAAA,QAAQ,EAAE,qBADZ;AAEEC,YAAAA,UAAU,EAAE,CAFd;AAGEc,YAAAA,MAAM,EAAE;AAHV,WALO;AAHT,SA3CK;AADI,OAAb;AA6DApB,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAe,KAAKiC,KAAL,CAAWd,KAA1B,CAA9B;AACD;AACF,GAxE0C,CA0E3C;;;AAiFA;AACAgB,EAAAA,WAAW,CAACjC,QAAD,EAAWC,UAAX,EAAuB;AAChC,UAAMK,KAAK,GAAGX,YAAY,CAACY,OAAb,CAAqB,OAArB,CAAd;AACA,UAAMC,QAAQ,GAAGX,IAAI,CAACY,KAAL,CAAWH,KAAX,CAAjB;AAEA,UAAM4B,OAAO,GAAG;AACdlC,MAAAA,QADc;AAEdC,MAAAA,UAFc;AAGdc,MAAAA,MAAM,EAAE,IAAIoB,IAAJ,GAAWC,OAAX;AAHM,KAAhB;AAMA5B,IAAAA,QAAQ,CAACP,UAAD,CAAR,CAAqBU,KAArB,CAA2BkB,IAA3B,CAAgCK,OAAhC,EAVgC,CAYhC;;AACA,SAAKlB,QAAL,CAAc;AACZC,MAAAA,KAAK,EAAET;AADK,KAAd;AAGAb,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeU,QAAf,CAA9B;AAED;;AAGH6B,EAAAA,MAAM,GAAG;AACP,UAAMpB,KAAK,GAAG,KAAKc,KAAL,CAAWd,KAAX,CAAiBqB,GAAjB,CAAqB,CAACC,IAAD,EAAOC,KAAP,KACjC;AAAI,MAAA,SAAS,EAAC,cAAd;AAA6B,MAAA,GAAG,EAAEA,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD,oBAAUD,IAAV;AACE,MAAA,KAAK,EAAE,CAACvC,QAAD,EAAWC,UAAX,KAA0B,KAAKgC,WAAL,CAAiBjC,QAAjB,EAA2BC,UAA3B,CADnC;AAEE,MAAA,WAAW,EAAE,CAACZ,CAAD,EAAIC,QAAJ,KAAiB,KAAKF,WAAL,CAAiBC,CAAjB,EAAqB,GAAEkD,IAAI,CAAC7C,EAAG,EAA/B,CAFhC;AAGE,MAAA,UAAU,EAAGL,CAAD,IAAO,KAAKgC,UAAL,CAAgBhC,CAAhB,CAHrB;AAIE,MAAA,MAAM,EAAE,CAACA,CAAD,EAAImC,OAAJ,KAAgB;AAAC,aAAKD,MAAL,CAAYlC,CAAZ,EAAgB,GAAEkD,IAAI,CAAC7C,EAAG,EAA1B;AAA6B,OAJxD;AAKE,MAAA,QAAQ,EAAE,CAACM,QAAD,EAAWC,UAAX,EAAuBP,EAAvB,KAA8B,KAAKK,UAAL,CAAgBC,QAAhB,EAA0B,GAAEuC,IAAI,CAAC7C,EAAG,EAApC,EAAuCA,EAAvC,CAL1C;AAME,MAAA,YAAY,EAAI,CAACO,UAAD,EAAaP,EAAb,KAAoB,KAAKwB,YAAL,CAAmB,GAAEqB,IAAI,CAAC7C,EAAG,EAA7B,EAAgCA,EAAhC,CANtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CADY,CAAd;AAYA,WACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGuB,KADH,CADF,CADF;AAOC;;AArM0C","sourcesContent":["import React, { Component } from 'react';\nimport './../css/Board.css';\nimport List from './List';\n\nexport default class Board extends Component {\n  constructor(props) {\n    super(props);\n    //if there's a localStorage to be had grab it otherwise set state\n    if(localStorage.getItem('lists')) {\n      const rawLS = localStorage.getItem('lists');\n      const parsedLS = JSON.parse(rawLS);\n      this.state = { lists: parsedLS }\n    } else {\n      this.state = {\n        lists: [\n          {\n            title: 'To Do',\n            id: 0,\n            cards: [{\n              taskText: 'MBA FIAP',\n              listNumber: 0,\n              timeId: 0\n            }, \n            {\n              taskText: 'RM 334466',\n              listNumber: 0,\n              timeId: 1\n            }]\n          },\n          {\n            title: 'Doing',\n            id: 1,\n            cards: [{\n              taskText: 'work',\n              listNumber: 1,\n              timeId: 2\n            }, \n            {\n              taskText: 'Blockchain',\n              listNumber: 1,\n              timeId: 3\n            }]\n          },\n          {\n            title: 'Test',\n            id: 2,\n            cards: [{\n              taskText: 'life',\n              listNumber: 2,\n              timeId: 4\n            }, \n            {\n              taskText: 'task',\n              listNumber: 2,\n              timeId: 5\n            }]\n          },\n          {\n            title: 'Done',\n            id: 3,\n            cards: [{\n              taskText: 'task1',\n              listNumber: 3,\n              timeId: 6\n            }, \n            {\n              taskText: 'default task card 2',\n              listNumber: 3,\n              timeId: 7\n            }]\n          }\n        ]\n      }\n\n      localStorage.setItem('lists', JSON.stringify(this.state.lists))\n    }\n  }\n\n  //get id of item being dragged and list where it's coming from\n  onDragStart = (e, fromList) => {\n    const dragInfo = {\n      taskId: e.currentTarget.id,\n      fromList: fromList\n    }\n  \n    localStorage.setItem('dragInfo', JSON.stringify(dragInfo));\n  }\n\n  onTaskEdit = (taskText, listNumber, id) => {\n    \n    console.log(`click edit`)\n    const taskEdit = {\n      taskId: id,\n      fromList: listNumber,\n      text: taskText\n    }\n    const rawLS = localStorage.getItem('lists');\n    const parsedLS = JSON.parse(rawLS);\n    const cardsArray = parsedLS[taskEdit.fromList].cards;\n    const indexOfCard = cardsArray.findIndex(card => card.timeId == taskEdit.taskId)\n    parsedLS[taskEdit.fromList].cards[indexOfCard].taskText = taskEdit.text\n    \n    //sync the state and localStorage\n    this.setState({\n      lists: parsedLS\n    });\n    localStorage.setItem('lists', JSON.stringify(parsedLS));\n    \n  }\n\n  onCardRemove = (listNumber, id) => {\n    \n    console.log(`click remove`)\n    const cardRemove = {\n      taskId: id,\n      fromList: listNumber\n      \n    }\n    const rawLS = localStorage.getItem('lists');\n    const parsedLS = JSON.parse(rawLS);\n    const cardsArray = parsedLS[cardRemove.fromList].cards;\n    const indexOfCard = cardsArray.findIndex(card => card.timeId == cardRemove.taskId)\n    parsedLS[cardRemove.fromList].cards.splice(indexOfCard, 1)\n    \n    //sync the state and localStorage\n    this.setState({\n      lists: parsedLS\n    });\n    localStorage.setItem('lists', JSON.stringify(parsedLS));\n    \n  }\n\n  onDragOver = (e) => {\n    e.preventDefault();\n  }\n\n  onDrop = (e, listNum) => {\n    //get the dropped task card, the localStorage, \n    const droppedTask = localStorage.getItem('dragInfo');\n    const rawLS = localStorage.getItem('lists');\n    const parsedLS = JSON.parse(rawLS);\n    const parsedDragInfo = JSON.parse(droppedTask)\n    \n    //get task cards array, get rid of moved card, and put a new card\n    // in the list where it was dropped\n    const cardsArray = parsedLS[parsedDragInfo.fromList].cards\n    const taskCard = cardsArray.find(card => card.timeId === parsedDragInfo.taskId)\n    const indexOfCard = cardsArray.findIndex(card => card.timeId === parsedDragInfo.taskId)\n    parsedLS[parsedDragInfo.fromList].cards.splice(indexOfCard, 1)\n    parsedLS[listNum].cards.push({...taskCard, listNumber: parseInt(listNum)})\n   \n    //sync the state and localStorage\n    this.setState({\n      lists: parsedLS\n    });\n    localStorage.setItem('lists', JSON.stringify(parsedLS));\n    \n  }\n\n  //add some new task cards\n  addTaskCard(taskText, listNumber) {\n    const rawLS = localStorage.getItem('lists');\n    const parsedLS = JSON.parse(rawLS);\n\n    const newTask = {\n      taskText,\n      listNumber,\n      timeId: new Date().valueOf()\n    }\n\n    parsedLS[listNumber].cards.push(newTask)\n\n    //sync state and localStorage\n    this.setState({\n      lists: parsedLS\n    })\n    localStorage.setItem('lists', JSON.stringify(parsedLS))\n  \n  }\n\n\nrender() {\n  const lists = this.state.lists.map((list, index) => (\n    <li className=\"list-wrapper\" key={index}>\n      <List {...list} \n        onAdd={(taskText, listNumber) => this.addTaskCard(taskText, listNumber)} \n        onDragStart={(e, fromList) => this.onDragStart(e, `${list.id}`)}\n        onDragOver={(e) => this.onDragOver(e)} \n        onDrop={(e, listNum) => {this.onDrop(e, `${list.id}`)}}\n        onUpdate={(taskText, listNumber, id) => this.onTaskEdit(taskText,`${list.id}`, id)}\n        onCardRemove = {(listNumber, id) => this.onCardRemove(`${list.id}`, id)} />\n    </li>\n  ));\n   \n  return (\n    <div className=\"board\">\n      <ul className=\"lists\">\n        {lists}\n      </ul>\n    </div>\n  );\n  }\n}"]},"metadata":{},"sourceType":"module"}
{"version":3,"sources":["TaskCard.js","AddTaskForm.js","List.js","Board.js","serviceWorker.js","index.js"],"names":["TaskCard","props","className","draggable","id","timeId","onDragStart","taskText","AddTaskForm","state","editing","event","preventDefault","this","textInput","value","trim","listNumber","formNum","console","log","onAdd","setState","onSubmit","e","type","class","ref","input","aria-label","onClick","setEditing","href","React","Component","List","cards","map","card","index","key","title","onDragOver","onDrop","Board","fromList","dragInfo","taskId","currentTarget","localStorage","setItem","JSON","stringify","listNum","droppedTask","getItem","rawLS","parsedLS","parse","parsedDragInfo","cardsArray","taskCard","find","indexOfCard","findIndex","splice","push","parseInt","lists","newTask","Date","valueOf","list","addTaskCard","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6c9c00be.chunk.js","sourcesContent":["import React from 'react';\nimport './TaskCard.css';\n\nexport default function TaskCard(props) {\n  return (\n    <div className=\"task-card\" draggable=\"true\" id={[props.timeId]} onDragStart={props.onDragStart}>\n      {props.taskText}\n    </div>\n  ) \n};\n","import React from 'react';\nimport './AddTaskForm.css';\n\nexport default class AddTaskForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editing: false\n    }\n  }\n\n  onSubmit(event) {\n    event.preventDefault();\n    const taskText = this.textInput.value.trim();\n    const listNumber = this.props.formNum;\n    console.log(listNumber)\n    if (taskText && this.props.onAdd) {\n      this.props.onAdd(taskText, listNumber);\n    }\n    this.textInput.value = '';\n  }\n\n setEditing(editing) {\n    this.setState({\n      editing\n    });\n  }\n\n  render() {\n    if(!this.state.editing) {\n      return (\n        <div className=\"open-add-button\" onClick={() => this.setEditing(true)}>\n          <a href=\"#\">Add a task!</a>\n        </div>  \n        ); \n    }\n      return (\n        <form className=\"card add-task-form\" onSubmit={(e) => this.onSubmit(e)}>\n          <input type=\"text\" class=\"task-input\" ref={input => this.textInput = input} aria-label=\"Add a task\" />\n          <div>\n            <button className=\"button add-button\">Add Task</button>\n            <button className=\"button cancel-button\" onClick={() => this.setEditing(false)}>Cancel</button>\n          </div>\n        </form>\n      );\n  }\n}","import React from 'react';\nimport TaskCard from './TaskCard';\nimport AddTaskForm from './AddTaskForm';\nimport './List.css';\n\n\nexport default class List extends React.Component {\n  constructor(props) {\n    super(props);\n    }\n   \n  render() {\n    const cards = this.props.cards.map((card, index) => {\n      return ( \n        <li key={index}>\n          <TaskCard {...card} onDragStart={this.props.onDragStart} />\n        </li>\n      );\n    })\n      \n    return (\n      <div>\n        <h2 className={`name-header name-${this.props.id}`}>{this.props.title}</h2>\n        <ul className=\"list\" onDragOver={this.props.onDragOver} onDrop={this.props.onDrop}>\n          {cards}\n          <li className=\"add-list-wrapper\">\n            <AddTaskForm formNum={this.props.id} onAdd={this.props.onAdd} />\n          </li>\n        </ul>\n      </div>\n    );\n  }\n  \n}","import React, { Component } from 'react';\nimport './Board.css';\nimport List from './List';\n\nexport default class Board extends Component {\n  constructor(props) {\n    super(props);\n    //if there's a localStorage to be had grab it otherwise set state\n    if(localStorage.getItem('lists')) {\n      const rawLS = localStorage.getItem('lists');\n      const parsedLS = JSON.parse(rawLS);\n      this.state = { lists: parsedLS }\n    } else {\n      this.state = {\n        lists: [\n          {\n            title: 'To Do',\n            id: 0,\n            cards: [{\n              taskText: 'default task card 1',\n              listNumber: 0,\n              timeId: 0\n            }, \n            {\n              taskText: 'default task card 2',\n              listNumber: 0,\n              timeId: 1\n            }]\n          },\n          {\n            title: 'Doing',\n            id: 1,\n            cards: [{\n              taskText: 'default task card 1',\n              listNumber: 1,\n              timeId: 2\n            }, \n            {\n              taskText: 'default task card 2',\n              listNumber: 1,\n              timeId: 3\n            }]\n          },\n          {\n            title: 'Test',\n            id: 2,\n            cards: [{\n              taskText: 'default task card 1',\n              listNumber: 2,\n              timeId: 4\n            }, \n            {\n              taskText: 'default task card 2',\n              listNumber: 2,\n              timeId: 5\n            }]\n          },\n          {\n            title: 'Done',\n            id: 3,\n            cards: [{\n              taskText: 'default task card 1',\n              listNumber: 3,\n              timeId: 6\n            }, \n            {\n              taskText: 'default task card 2',\n              listNumber: 3,\n              timeId: 7\n            }]\n          }\n        ]\n      }\n\n      localStorage.setItem('lists', JSON.stringify(this.state.lists))\n    }\n  }\n\n  //get id of item being dragged and list where it's coming from\n  onDragStart = (e, fromList) => {\n    console.log(`what a drag!`)\n    const dragInfo = {\n      taskId: e.currentTarget.id,\n      fromList: fromList\n    }\n  \n    localStorage.setItem('dragInfo', JSON.stringify(dragInfo));\n  }\n\n  onDragOver = (e) => {\n    e.preventDefault();\n  }\n\n  onDrop = (e, listNum) => {\n    //get the dropped task card, the localStorage, \n    const droppedTask = localStorage.getItem('dragInfo');\n    const rawLS = localStorage.getItem('lists');\n    const parsedLS = JSON.parse(rawLS);\n    const parsedDragInfo = JSON.parse(droppedTask)\n    \n    //get task cards array, get rid of moved card, and put a new card\n    // in the list where it was dropped\n    const cardsArray = parsedLS[parsedDragInfo.fromList].cards\n    const taskCard = cardsArray.find(card => card.timeId == parsedDragInfo.taskId)\n    const indexOfCard = cardsArray.findIndex(card => card.timeId == parsedDragInfo.taskId)\n    parsedLS[parsedDragInfo.fromList].cards.splice(indexOfCard, 1)\n    parsedLS[listNum].cards.push({...taskCard, listNumber: parseInt(listNum)})\n   \n    //sync the state and localStorage\n    this.setState({\n      lists: parsedLS\n    });\n    localStorage.setItem('lists', JSON.stringify(parsedLS));\n    \n  }\n\n  //add some new task cards\n  addTaskCard(taskText, listNumber) {\n    const rawLS = localStorage.getItem('lists');\n    const parsedLS = JSON.parse(rawLS);\n\n    const newTask = {\n      taskText,\n      listNumber,\n      timeId: new Date().valueOf()\n    }\n\n    parsedLS[listNumber].cards.push(newTask)\n\n    //sync state and localStorage\n    this.setState({\n      lists: parsedLS\n    })\n    localStorage.setItem('lists', JSON.stringify(parsedLS))\n  \n  }\n\n\nrender() {\n  const lists = this.state.lists.map((list, index) => (\n    <li className=\"list-wrapper\" key={index}>\n      <List {...list} \n        onAdd={(taskText, listNumber) => this.addTaskCard(taskText, listNumber)} \n        onDragStart={(e, fromList) => this.onDragStart(e, `${list.id}`)}\n        onDragOver={(e) => this.onDragOver(e)} \n        onDrop={(e, listNum) => {this.onDrop(e, `${list.id}`)}}\n      />\n    </li>\n  ));\n   \n  return (\n    <div className=\"board\">\n      <ul className=\"lists\">\n        {lists}\n      </ul>\n    </div>\n  );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './Board';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Board />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}